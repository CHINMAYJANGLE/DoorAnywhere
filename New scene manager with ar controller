--- New scene 
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.SceneManagement;

public class NewScene : MonoBehaviour
{
    public void SceneLoader( int SceneIndex)
    {
        SceneManager.LoadScene(SceneIndex);
    }
}

---- AR controller

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

using GoogleARCore;

#if UNITY_EDITOR
using input = GoogleARCore.InstantPreviewInput;
#endif
public class ARController : MonoBehaviour
{

    //fill the list that detected in he frame
    private List<DetectedPlane> m_NewDetectedPlanes = new List<DetectedPlane>();

    public GameObject GridPrefab;

    public GameObject Portal;

    public GameObject ARCamera;
    // Start is called before the first frame update
    void Start()
    {
        
    }

    // Update is called once per frame
    void Update()
    {
        //Check AR core sessions
        if(Session.Status != SessionStatus.Tracking)
        {
            return;
        }
        //to fill the plane in frame
        Session.GetTrackables<DetectedPlane>(m_NewDetectedPlanes, TrackableQueryFilter.New);

        //initiate a grid
        for(int i=0; i< m_NewDetectedPlanes.Count; ++i)
        {
            GameObject grid = Instantiate(GridPrefab, Vector3.zero, Quaternion.identity, transform);
            grid.GetComponent<GridVisualiser>().Initialize(m_NewDetectedPlanes[i]);
        }
        //Check for screen touch
        Touch touch;
        if(Input.touchCount < 1 || (touch = Input.GetTouch(0)).phase != TouchPhase.Began)
        {
            return; 
        }
        
        //if user touch any track
        TrackableHit hit;
        if (Frame.Raycast(touch.position.x, touch.position.y, TrackableHitFlags.PlaneWithinPolygon, out hit))
        {
            //put portal on tracked plane
            //Enable Portal
            Portal.SetActive(true);

            //Create Anchor
            Anchor anchor = hit.Trackable.CreateAnchor(hit.Pose);
            //Set positon of portal
            Portal.transform.position = hit.Pose.position;
            Portal.transform.rotation = hit.Pose.rotation;

            //to ste prtal to face camera
            Vector3 cameraPosition = ARCamera.transform.position;

            //to rotate portal aound y axis
            cameraPosition.y = hit.Pose.position.y;

            //poratal roatate to face camera
            Portal.transform.LookAt(cameraPosition, Portal.transform.up);
            //update the portal anchor
            Portal.transform.parent = anchor.transform;
        }
    }
}

